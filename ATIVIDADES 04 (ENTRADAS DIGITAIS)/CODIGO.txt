#include <stdio.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "driver/gpio.h"

// Definição dos pinos dos LEDs
#define LED0 17
#define LED1 3
#define LED2 11
#define LED3 14

// Definição dos pinos dos botões
#define BOTAO_INCREMENTO 36
#define BOTAO_MODIFICADOR 35

// Variáveis globais
uint8_t valor_contador = 0;
uint8_t passo = 1;

int estado_ant_inc = 0;
int estado_ant_mod = 0;

// Função para exibir número em binário nos LEDs
void exibir_binario(uint8_t numero) {
    gpio_set_level(LED0, numero & 0x01);
    gpio_set_level(LED1, (numero >> 1) & 0x01);
    gpio_set_level(LED2, (numero >> 2) & 0x01);
    gpio_set_level(LED3, (numero >> 3) & 0x01);
}

// Configuração inicial dos pinos
void setup() {
    // Configura LEDs como saída
    gpio_config_t io_conf = {};
    io_conf.intr_type = GPIO_INTR_DISABLE;
    io_conf.mode = GPIO_MODE_OUTPUT;
    io_conf.pin_bit_mask = (1ULL << LED0) | (1ULL << LED1) | (1ULL << LED2) | (1ULL << LED3);
    io_conf.pull_down_en = 0;
    io_conf.pull_up_en = 0;
    gpio_config(&io_conf);

    // Configura botões como entrada
    io_conf.intr_type = GPIO_INTR_DISABLE;
    io_conf.mode = GPIO_MODE_INPUT;
    io_conf.pin_bit_mask = (1ULL << BOTAO_INCREMENTO) | (1ULL << BOTAO_MODIFICADOR);
    io_conf.pull_down_en = 0;
    io_conf.pull_up_en = 0;  // Habilita pull-up interno se necessário
    gpio_config(&io_conf);
}

void app_main() {
    setup();

    while (1) {
        int estado_inc = gpio_get_level(BOTAO_INCREMENTO);
        if (estado_inc == 1 && estado_ant_inc == 0) {
            valor_contador = (valor_contador + passo) % 16;
            exibir_binario(valor_contador);
        }
        estado_ant_inc = estado_inc;

        int estado_mod = gpio_get_level(BOTAO_MODIFICADOR);
        if (estado_mod == 1 && estado_ant_mod == 0) {
            passo = (passo == 1) ? 2 : 1;
        }
        estado_ant_mod = estado_mod;

        vTaskDelay(pdMS_TO_TICKS(50));  // Delay para debounce (50ms)
    }
}
#include <stdio.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "driver/gpio.h"

// Definição dos pinos dos LEDs
#define LED0 17
#define LED1 3
#define LED2 11
#define LED3 14

// Definição dos pinos dos botões
#define BOTAO_INCREMENTO 36
#define BOTAO_MODIFICADOR 35

// Variáveis globais
uint8_t valor_contador = 0;
uint8_t passo = 1;

int estado_ant_inc = 0;
int estado_ant_mod = 0;

// Função para exibir número em binário nos LEDs
void exibir_binario(uint8_t numero) {
    gpio_set_level(LED0, numero & 0x01);
    gpio_set_level(LED1, (numero >> 1) & 0x01);
    gpio_set_level(LED2, (numero >> 2) & 0x01);
    gpio_set_level(LED3, (numero >> 3) & 0x01);
}

// Configuração inicial dos pinos
void setup() {
    // Configura LEDs como saída
    gpio_config_t io_conf = {};
    io_conf.intr_type = GPIO_INTR_DISABLE;
    io_conf.mode = GPIO_MODE_OUTPUT;
    io_conf.pin_bit_mask = (1ULL << LED0) | (1ULL << LED1) | (1ULL << LED2) | (1ULL << LED3);
    io_conf.pull_down_en = 0;
    io_conf.pull_up_en = 0;
    gpio_config(&io_conf);

    // Configura botões como entrada
    io_conf.intr_type = GPIO_INTR_DISABLE;
    io_conf.mode = GPIO_MODE_INPUT;
    io_conf.pin_bit_mask = (1ULL << BOTAO_INCREMENTO) | (1ULL << BOTAO_MODIFICADOR);
    io_conf.pull_down_en = 0;
    io_conf.pull_up_en = 0;  // Habilita pull-up interno se necessário
    gpio_config(&io_conf);
}

void app_main() {
    setup();

    while (1) {
        int estado_inc = gpio_get_level(BOTAO_INCREMENTO);
        if (estado_inc == 1 && estado_ant_inc == 0) {
            valor_contador = (valor_contador + passo) % 16;
            exibir_binario(valor_contador);
        }
        estado_ant_inc = estado_inc;

        int estado_mod = gpio_get_level(BOTAO_MODIFICADOR);
        if (estado_mod == 1 && estado_ant_mod == 0) {
            passo = (passo == 1) ? 2 : 1;
        }
        estado_ant_mod = estado_mod;

        vTaskDelay(pdMS_TO_TICKS(50));  // Delay para debounce (50ms)
    }
}
